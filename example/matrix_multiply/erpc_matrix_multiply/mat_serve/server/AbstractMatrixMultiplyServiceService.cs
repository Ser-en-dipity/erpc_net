/** 
 * Generated by erpcgen 1.13.0 on Thu Jul 18 14:34:12 2024.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
using mat.erpc_matrix_multiply.interfaces;


using io.github.embeddedrpc.erpc.auxiliary;
using io.github.embeddedrpc.erpc.codec;
using io.github.embeddedrpc.erpc.server;
using System.Collections.Generic;

namespace mat.erpc_matrix_multiply.server;


/**
 * Testing abstract service class for simple eRPC interface.
 */
public abstract class AbstractMatrixMultiplyServiceService
        : Service, IMatrixMultiplyService {

    private static readonly int SERVICE_ID = 1;
    private static readonly int ERPCMATRIXMULTIPLY_ID = 1;
    
    public abstract void erpcMatrixMultiply(int[][] matrix1, int[][] matrix2, Reference<int[][]> result_matrix);
    /**
     * Default constructor.
     */
    public AbstractMatrixMultiplyServiceService() : base(SERVICE_ID) {
        addMethodHandler(ERPCMATRIXMULTIPLY_ID, this.erpcMatrixMultiplyHandler);
    }

    private void erpcMatrixMultiplyHandler(int sequence, Codec codec) {
        int[][] matrix1;
        int[][] matrix2;
        Reference<int[][]> result_matrix = new Reference<int[][]>();

        matrix1 = new int[5][];
        for (int genLoopVariable1 = 0; genLoopVariable1 < 5; ++genLoopVariable1)
        {
            int[] genValueVariable1 = new int[5];
            for (int genLoopVariable2 = 0; genLoopVariable2 < 5; ++genLoopVariable2)
            {
                int genValueVariable2 = codec.readInt32();
                genValueVariable1[genLoopVariable2] = genValueVariable2;
            }
            matrix1[genLoopVariable1] = genValueVariable1;
        }
        matrix2 = new int[5][];
        for (int genLoopVariable1 = 0; genLoopVariable1 < 5; ++genLoopVariable1)
        {
            int[] genValueVariable1 = new int[5];
            for (int genLoopVariable2 = 0; genLoopVariable2 < 5; ++genLoopVariable2)
            {
                int genValueVariable2 = codec.readInt32();
                genValueVariable1[genLoopVariable2] = genValueVariable2;
            }
            matrix2[genLoopVariable1] = genValueVariable1;
        }

        erpcMatrixMultiply(matrix1, matrix2, result_matrix);

        codec.reset();

        codec.startWriteMessage(new MessageInfo(
                MessageType.kReplyMessage,
                getServiceId(),
                ERPCMATRIXMULTIPLY_ID,
                sequence)
        );

        // Read out parameters
        for (int genLoopVariable1 = 0; genLoopVariable1 < 5; ++genLoopVariable1)
        {
            int[] genValueVariable1 = result_matrix.get()[genLoopVariable1];
            for (int genLoopVariable2 = 0; genLoopVariable2 < 5; ++genLoopVariable2)
            {
                int genValueVariable2 = genValueVariable1[genLoopVariable2];
                codec.writeInt32(genValueVariable2);
            }
        }
    }

}

