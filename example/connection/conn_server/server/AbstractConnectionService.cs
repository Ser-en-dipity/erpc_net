/** 
 * Generated by erpcgen 1.13.0 on Mon Jul 22 20:53:21 2024.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
using iCNC.Servo.Connection.interfaces;

using iCNC.Servo.Connection.common.enums;
using io.github.embeddedrpc.erpc.auxiliary;
using io.github.embeddedrpc.erpc.codec;
using io.github.embeddedrpc.erpc.server;
using System.Collections.Generic;

namespace iCNC.Servo.Connection.server;


/**
 * Testing abstract service class for simple eRPC interface.
 */
public abstract class AbstractConnectionService
        : Service, IConnection {

    private static readonly int SERVICE_ID = 1;
    private static readonly int ISALIVE_ID = 1;
    
    public abstract void IsAlive(Heartbeat req, Reference<Heartbeat> rep);
    /**
     * Default constructor.
     */
    public AbstractConnectionService() : base(SERVICE_ID) {
        addMethodHandler(ISALIVE_ID, this.IsAliveHandler);
    }

    private void IsAliveHandler(int sequence, Codec codec) {
        Heartbeat req;
        Reference<Heartbeat> rep = new Reference<Heartbeat>();

        req = (Heartbeat)codec.readInt32();

        IsAlive(req, rep);

        codec.reset();

        codec.startWriteMessage(new MessageInfo(
                MessageType.kReplyMessage,
                getServiceId(),
                ISALIVE_ID,
                sequence)
        );

        // Read out parameters
        codec.writeInt32((int)rep.get());
    }

}

