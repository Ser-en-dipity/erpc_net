/*
 * AUTOMATICALLY GENERATED FILE - DO NOT EDIT
 */

// Generated from ..\src\templates\dotnet_struct.template
extern const char * const kDotnetStruct;

const char * const kDotnetStruct = 
"{% if mlComment != \"\" %}\n"
"{$mlComment}\n"
"\n"
"{% endif %}\n"
"/** \n"
" * Generated by erpcgen {$erpcVersion} on {$todaysDate}.\n"
" * \n"
" * AUTOGENERATED - DO NOT EDIT\n"
" */ \n"
"\n"
"{% if not empty(group.symbolsMap.structs) %}using {$groupPackage}.common.structs;{% elif not empty(structs)%}using {$groupPackage}.common.structs;{% endif %}\n"
"{% if not empty(enums)%}using {$groupPackage}.common.enums;{% endif %}\n"
"using io.github.embeddedrpc.erpc.auxiliary;\n"
"using io.github.embeddedrpc.erpc.codec;\n"
"{%  for inc in includes %}\n"
"using {$inc};\n"
"{%  endfor -- includes %}\n"
"using System.Collections.Generic;\n"
"\n"
"namespace {$groupPackage}.common.structs;\n"
"{% set s = struct %}\n"
"{$>(s.mlComment or s.ilComment)}\n"
"public class {$s.name}{\n"
"{% for m in s.members if not m.lengthForMember %}\n"
"{%   if m.mlComment or m.ilComment %}\n"
"   {$m.mlComment or m.ilComment}\n"
"{%   endif %}\n"
"    private {$m.call.type.typeName} {$m.call.name};\n"
"{% endfor -- members %}\n"
"\n"
"    public {$s.name} ({% for m in s.members if ((not m.lengthForMember) && (m.call.type.type != 'union' or m.call.type.isNonEncapsulatedUnion)) %}{$m.call.type.typeName} {$m.call.name}{% if !loop.last %}, {% endif %}{% endfor %}) {\n"
"{% for m in s.members if not m.lengthForMember %}\n"
"        this.{$m.call.name} = {$m.call.name};\n"
"{% endfor -- members %}\n"
"    }\n"
"\n"
"    public {$s.name}() {\n"
"    }\n"
"\n"
"    public void write(Codec codec) {\n"
"{% for m in s.members if not m.serializedViaMember %}\n"
"{%     if m.isNullable %}\n"
"        if(this.{$m.name} == null) {\n"
"            codec.writeNullFlag(1);\n"
"        } else {\n"
"            codec.writeNullFlag(0);\n"
"{$          addIndent(\"            \", m.call.encode(m.call))}\n"
"        }\n"
"{%     else %}\n"
"        Utils.checkNotNull({$m.name}, \"{$m.name} is null\");\n"
"        {% if m.call.isReference%}Utils.checkNotNull({$m.name}.get(), \"{$m.name}.value is null\");{% endif %}\n"
"{$      addIndent(\"        \", m.call.encode(m.call))}\n"
"{%     endif -- isNullable %}\n"
"{% endfor -- members %}\n"
"    }\n"
"\n"
"    public static {$s.name} read(Codec codec) {\n"
"        {$s.name} _struct = new {$s.name}();\n"
"{% for m in s.members if not m.serializedViaMember %}\n"
"{% set name = m.call.name%}\n"
"{% set m.call.name = \"_struct.\" & m.call.name %}\n"
"{%     if m.isNullable %}\n"
"        if(!codec.readNullFlag()) {\n"
"{$         addIndent(\"            \", m.call.decode(m.call))}\n"
"        }\n"
"{%     else %}\n"
"{$         addIndent(\"        \", m.call.decode(m.call))}\n"
"{%     endif -- isNullable %}\n"
"{% set m.call.name = name %}\n"
"{% endfor -- members %}\n"
"        return _struct;\n"
"    }\n"
"\n"
"{% for m in s.members if ((not m.lengthForMember) && (m.call.type.type != 'union' or m.call.type.isNonEncapsulatedUnion)) %}\n"
"    public {$m.call.type.typeName} get_{$m.name}() {\n"
"        return {$m.name};\n"
"    }\n"
"\n"
"    public void set_{$m.name}({$m.call.type.typeName} {$m.name}) {\n"
"        this.{$m.name} = {$m.name};\n"
"    }\n"
"{% endfor %}\n"
"\n"
"{# create read-only properties for @length counts #}\n"
"{% for m in s.members if m.lengthForMember %}\n"
"    public int {$m.name}() {\n"
"        return {$m.lengthForMember}.Count;\n"
"    }\n"
"\n"
"{% endfor -- s.members %}\n"
"}\n"
;

