/*
 * AUTOMATICALLY GENERATED FILE - DO NOT EDIT
 */

// Generated from ..\src\templates\cpp_interface_source.template
extern const char * const kCppInterfaceSource;

const char * const kCppInterfaceSource = 
"{% if mlComment != \"\" %}\n"
"{$mlComment}\n"
"\n"
"{% endif %}\n"
"{$commonHeader()}\n"
"\n"
"#include \"{$interfaceCppHeaderName}\"\n"
"\n"
"{$checkVersion()}\n"
"{$>checkCrc()}\n"
"\n"
"using namespace std;\n"
"{$usingNamespace() >}\n"
"\n"
"{% for iface in group.interfaces -- service subclass method impl %}\n"
"{$iface.interfaceClassName}::~{$iface.interfaceClassName}(void)\n"
"{\n"
"}\n"
"{%  for cb in iface.callbacksInt %}\n"
"{$iface.interfaceClassName}::{$cb.name} {$iface.interfaceClassName}::_{$cb.name}[{$count(cb.callbacks)}] = { {%    for c in cb.callbacks %}&{$iface.interfaceClassName}::{$c.name}{%     if !loop.last %}, {%     endif -- loop.last %}{%    endfor -- f.callbacks %} };\n"
"{%  endfor %}\n"
"{%  for cb in iface.callbacksInt %}\n"
"\n"
"bool {$iface.interfaceClassName}::get_callbackAddress_{$cb.name}(uint16_t index, {$cb.name} *callback)\n"
"{\n"
"    bool find;\n"
"\n"
"    if (index<sizeof(_{$cb.name})/sizeof({$cb.name}))\n"
"    {\n"
"        find = true;\n"
"        *callback={$iface.interfaceClassName}::_{$cb.name}[index];\n"
"    }\n"
"    else\n"
"    {\n"
"        find = false;\n"
"    }\n"
"\n"
"    return find;\n"
"}\n"
"\n"
"bool {$iface.interfaceClassName}::get_callbackIdx_{$cb.name}(const {$cb.name} *callback, uint16_t &index)\n"
"{\n"
"    bool find = false;\n"
"\n"
"    for (index = 0; index < sizeof(_{$cb.name})/sizeof({$cb.name}); index++)\n"
"    {\n"
"        if ({$iface.interfaceClassName}::_{$cb.name}[index] == *callback)\n"
"        {\n"
"            find = true;\n"
"            break;\n"
"        }\n"
"    }\n"
"\n"
"    return find;\n"
"}\n"
"{%  endfor %}\n"
"{% endfor %}\n"
;

