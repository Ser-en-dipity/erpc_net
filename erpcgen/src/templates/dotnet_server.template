/** 
 * Generated by erpcgen {$erpcVersion} on {$todaysDate}.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
{% set iface = interface %}
using {$groupPackage}.interfaces.I{$iface.name};
{% if not empty(group.symbolsMap.structs) %}using {$groupPackage}.common.structs;{% elif not empty(structs)%}using {$groupPackage}.common.structs;{% endif %}
{% if not empty(enums)%}using {$groupPackage}.common.enums;{% endif %}
using io.github.embeddedrpc.erpc.auxiliary;
using io.github.embeddedrpc.erpc.codec;
using io.github.embeddedrpc.erpc.server;
using System.Collections.Generic;

namespace {$groupPackage}.server;

{%  for inc in includes %}
using {$inc};
{%  endfor -- includes %}

/**
 * Testing abstract service class for simple eRPC interface.
 */
public abstract class Abstract{$iface.name}Service
        : Service, I{$iface.name} {

    /**
     * Default constructor.
     */
    public Abstract{$iface.name}Service() : base(I{$iface.name}.SERVICE_ID) {
{% for fn in iface.functions %}
        addMethodHandler(I{$iface.name}.{$upper(fn.name)}_ID, this.{$fn.name}Handler);
{% endfor -- fn %}
    }

{% for fn in iface.functions %}
    private void {$fn.name}Handler(int sequence, Codec codec) {
{%          for p in fn.parameters if not p.serializedViaMember %}
        {$p.call.type.typeName} {$p.name}{% if p.call.isReference %} = new Reference<>(){% endif%};
{%          endfor %}

{%          for p in fn.inParameters if not p.serializedViaMember %}
{% set tmp = p.call.needTypeDeclaration%}
{% set p.call.needTypeDeclaration = false %}
{$ addIndent("        ", p.call.decode(p.call))}
{% set p.call.needTypeDeclaration = tmp %}
{%          endfor %}

        {%  if not fn.isOneway %}{% if fn.isReturnValue && fn.returnValue.type.type != "void" %}{$fn.returnValue.call.type.typeName} _result = {% endif %}{% endif %}{$fn.name}({% for p in fn.parameters if not p.serializedViaMember %}{$p.name}{% if !loop.last%}, {% endif %}{% endfor %});

        codec.reset();

{%  if not fn.isOneway %}
        codec.startWriteMessage(new MessageInfo(
                MessageType.kReplyMessage,
                getServiceId(),
                I{$iface.name}.{$upper(fn.name)}_ID,
                sequence)
        );

        // Read out parameters
{% for p in fn.outParameters if not p.serializedViaMember %}
{%     if p.isNullable %}
        if(!codec.readNullFlag()) {
{$         addIndent("            ", p.call.encode(p.call))}
        }
{%     else %}
{$         addIndent("        ", p.call.encode(p.call))}
{%     endif -- isNullable %}
{% endfor -- outParams %}
{%      if fn.isReturnValue && fn.returnValue.type.type != "void" %}
        // Read return value
{$      addIndent("        ",  fn.returnValue.call.encode(fn.returnValue.call))}
{%      endif -- returnValue %}
{%  endif -- oneway %}
    }
{% endfor -- fn %}

}

